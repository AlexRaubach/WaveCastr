<div id="guest-list">
  <%= render @episode.guests %>

  <button id="init">init</button>
  <button id="start" disabled>start</button>
  <button id="pause" disabled>pause</button>
  <button id="resume" disabled>resume</button>
  <button id="stopButton" disabled>stop</button>

</div>
<div id="chat-box">
  <!-- Chat will go here -->
</div>
<div id="track-list">
  <ul id="recordingslist">
  <!-- Download buttons for host will be visible here if recording has stopped -->

  </ul>
</div>

<pre id="log"></pre>

<%= render "aws_s3_upload_form.html.erb" %>

<script src="/recorder.min.js"></script>


  <script>
    var recorder;

    start.addEventListener( "click", function(){ recorder.start(); });
    pause.addEventListener( "click", function(){ recorder.pause(); });
    resume.addEventListener( "click", function(){ recorder.resume(); });
    stopButton.addEventListener( "click", function(){ recorder.stop(); });
    init.addEventListener( "click", function(){

      if (!Recorder.isRecordingSupported()) {
        return screenLogger("Recording features are not supported in your browser.");
      }

      recorder = new Recorder({
        // Settings like bitrate or sampleRate would go here
        encoderPath: "/encoderWorker.min.js"
      });

      recorder.addEventListener( "start", function(e){
        screenLogger('Recorder is started');
        init.disabled = start.disabled = resume.disabled = true;
        pause.disabled = stopButton.disabled = false;
      });

      recorder.addEventListener( "stop", function(e){
        screenLogger('Recorder is stopped');
        init.disabled = false;
        pause.disabled = resume.disabled = stopButton.disabled = start.disabled = true;
      });

      recorder.addEventListener( "pause", function(e){
        screenLogger('Recorder is paused');
        init.disabled = pause.disabled = start.disabled = true;
        resume.disabled = stopButton.disabled = false;
      });

      recorder.addEventListener( "resume", function(e){
        screenLogger('Recorder is resuming');
        init.disabled = start.disabled = resume.disabled = true;
        pause.disabled = stopButton.disabled = false;
      });

      recorder.addEventListener( "streamError", function(e){
        screenLogger('Error encountered: ' + e.error.name );
      });

      recorder.addEventListener( "streamReady", function(e){
        init.disabled = pause.disabled = resume.disabled = stopButton.disabled = true;
        start.disabled = false;
        screenLogger('Audio stream is ready.');
      });

      recorder.addEventListener( "dataAvailable", function(e){
        dataBlob = new Blob( [e.detail], { type: 'audio/ogg' } );
        dataBlob.name = "TESTING.ogg"
        var fileName = new Date().toISOString() + ".ogg";
        var url = URL.createObjectURL( dataBlob );
        blobUrl = url
        var audio = document.createElement('audio');
        audio.controls = true;
        audio.src = url;

        var link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        link.innerHTML = link.download;

        var li = document.createElement('li');
        li.appendChild(link);
        li.appendChild(audio);

        recordingslist.appendChild(li);
        debugger;
        // sendToS3(dataBlob)
      });

      recorder.initStream();
    });

    function screenLogger(text, data) {
      log.innerHTML += "\n" + text + " " + (data || '');
    }

  </script>



